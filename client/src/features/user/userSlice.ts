import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk, store } from '../../app/store';
import { handleIncomingRedirect, login, fetch, getDefaultSession, ISessionInfo } from '@inrupt/solid-client-authn-browser'
import { loadJobs, readTypeIndex } from '../job/jobSlice';

export interface UserState {
  sessionId: string;
  webId: string;
  isLoggedIn: boolean;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: UserState = {
  sessionId: '',
  webId: '',
  isLoggedIn: false,
  status: 'idle'
};

export const logUserIn = createAsyncThunk<ISessionInfo>(
  'user/login',
  async (arg: any, { dispatch }) => {
    await handleIncomingRedirect();

    const session = getDefaultSession();

    if (!session.info.isLoggedIn) {
      await login({
        oidcIssuer: "http://localhost:8000",
        redirectUrl: "http://localhost:3000/login",
        //clientId: "http://localhost:3000/id.jsonld"
        clientName: "Solid Indexer Client"
      });
    }

    else {
      dispatch(loadJobs());
      dispatch(readTypeIndex());
    }

    return session.info;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loginUser: (state, action: PayloadAction<ISessionInfo>) => {
      state.sessionId = action.payload.sessionId;
      state.isLoggedIn = action.payload.isLoggedIn;
      state.webId = action.payload.webId || '';
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(logUserIn.fulfilled, (state, action) => {
        state.sessionId = action.payload.sessionId;
        state.isLoggedIn = action.payload.isLoggedIn;
        state.webId = action.payload.webId || '';

        //loadJobs();
      })
  },
});

//export const { loginUser } = userSlice.actions;

// Selectors
export const selectLoginStatus = (state: RootState) => state.user.status;

export const selectIsLoggedIn = (state: RootState) => state.user.isLoggedIn;

export const selectWebId = (state: RootState) => state.user.webId;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };
*/

export default userSlice.reducer;
